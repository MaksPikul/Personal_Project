datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())
  name String
  email String @unique
  emailVerified DateTime?
  image String?
  password String

  accounts Account[]
  members Member[]
  projects Project[]
  views View[]
  tasks Task[]


  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete:Cascade)

  @@unique([userId])
}

model Project {
  id String @id @default(uuid())
  name String
  imageUrl String 
  inviteCode String @unique

  members Member[]
  views View[]
  lists List[]
  

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MOD
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project Project @relation(fields:[projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
  @@unique([userId, projectId])
}

enum ViewType {
  TABLE
  KANBAN
  NOTEPAD
  ROADMAP
}

model View {
  id String @id @default(uuid())
  type ViewType 
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project Project @relation(fields:[projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([projectId])
}

model List {
  id String @id @default(uuid())
  title String
  order Int

  tasks Task[] 

  projectId String
  project Project @relation(fields:[projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
}

model Task {
  id String @id @default(uuid())
  title String
  order Int
  description String

  status Status
  due DateTime @default(now())
  urgency Urgency
  assignee String

  isAllocated Boolean
  userId String
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)

  listId String
  list List @relation(fields:[listId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
  @@index([userId])
}

enum Status {
  PENDING
  INPROGRESS
  DONE
  ERROR
}

enum Urgency {
  LOW
  MEDIUM
  HIGH
}


